-- Script COMPLETO para criar banco de dados Trilhas com Sistema de Gamifica√ß√£o
-- Execute este script no MySQL Workbench para ter um sistema completo e robusto

-- Remover banco existente (se existir) e criar novo
DROP DATABASE IF EXISTS trilhas;
CREATE DATABASE trilhas DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

-- Usar o banco de dados
USE trilhas;

-- ============================================================
-- TABELAS B√ÅSICAS
-- ============================================================

-- Criar tabela de usu√°rios
CREATE TABLE users (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT,
  name VARCHAR(120) NOT NULL,
  email VARCHAR(191) NOT NULL UNIQUE,
  matricula VARCHAR(64) NOT NULL UNIQUE,
  password_hash VARCHAR(255) NOT NULL,
  role ENUM('student','professor') NOT NULL DEFAULT 'student',
  course ENUM('Inform√°tica','Meio Ambiente','Produ√ß√£o Cultural','Mec√¢nica') NULL,
  profile_photo TEXT NULL,
  bio TEXT NULL,
  cover_photo TEXT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (id),
  INDEX idx_email (email),
  INDEX idx_matricula (matricula),
  INDEX idx_role (role),
  INDEX idx_course (course)
);

-- Criar tabela de trilhas
CREATE TABLE trails (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT,
  title VARCHAR(120) NOT NULL,
  description TEXT NOT NULL,
  icon VARCHAR(10) DEFAULT 'üìö',
  category VARCHAR(50) NOT NULL,
  difficulty ENUM('beginner', 'intermediate', 'advanced') DEFAULT 'beginner',
  total_xp INT DEFAULT 0,
  course ENUM('base', 'Inform√°tica', 'Meio Ambiente', 'Produ√ß√£o Cultural', 'Mec√¢nica') DEFAULT 'base',
  is_active BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (id),
  INDEX idx_category (category),
  INDEX idx_difficulty (difficulty),
  INDEX idx_course (course),
  INDEX idx_is_active (is_active)
);

-- Criar tabela de m√≥dulos
CREATE TABLE modules (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT,
  trail_id INT UNSIGNED NOT NULL,
  title VARCHAR(120) NOT NULL,
  description TEXT NOT NULL,
  order_index INT NOT NULL,
  xp_reward INT DEFAULT 100,
  resources_count INT DEFAULT 0,
  badge VARCHAR(10) DEFAULT 'üèÖ',
  content TEXT,
  is_locked BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (id),
  FOREIGN KEY (trail_id) REFERENCES trails(id) ON DELETE CASCADE,
  INDEX idx_trail_order (trail_id, order_index),
  INDEX idx_is_locked (is_locked)
);

-- Criar tabela de submiss√µes (conectada com m√≥dulos)
CREATE TABLE submissions (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT,
  user_id INT UNSIGNED NOT NULL,
  module_id INT UNSIGNED NULL,
  trail_id INT UNSIGNED NULL,
  title VARCHAR(255) NOT NULL,
  subject VARCHAR(100) NOT NULL,
  year VARCHAR(50) NOT NULL,
  content_type ENUM('video','document','image','other') NOT NULL,
  description TEXT NOT NULL,
  keywords TEXT NULL,
  file_path VARCHAR(500) NOT NULL,
  file_name VARCHAR(255) NOT NULL,
  file_size INT NOT NULL,
  status ENUM('pending','approved','rejected') NOT NULL DEFAULT 'pending',
  feedback TEXT NULL,
  reviewed_by INT UNSIGNED NULL,
  reviewed_at TIMESTAMP NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (id),
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
  FOREIGN KEY (module_id) REFERENCES modules(id) ON DELETE SET NULL,
  FOREIGN KEY (trail_id) REFERENCES trails(id) ON DELETE SET NULL,
  FOREIGN KEY (reviewed_by) REFERENCES users(id) ON DELETE SET NULL,
  INDEX idx_user_id (user_id),
  INDEX idx_module_id (module_id),
  INDEX idx_trail_id (trail_id),
  INDEX idx_status (status),
  INDEX idx_created_at (created_at)
);

-- Criar tabela de progresso do usu√°rio
CREATE TABLE user_progress (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT,
  user_id INT UNSIGNED NOT NULL,
  module_id INT UNSIGNED NOT NULL,
  trail_id INT UNSIGNED NOT NULL,
  status ENUM('not_started', 'in_progress', 'completed') DEFAULT 'not_started',
  xp_earned INT DEFAULT 0,
  completed_at TIMESTAMP NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (id),
  UNIQUE KEY unique_user_module (user_id, module_id),
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
  FOREIGN KEY (module_id) REFERENCES modules(id) ON DELETE CASCADE,
  FOREIGN KEY (trail_id) REFERENCES trails(id) ON DELETE CASCADE,
  INDEX idx_user_trail (user_id, trail_id),
  INDEX idx_user_status (user_id, status)
);

-- Criar tabela de conquistas
CREATE TABLE achievements (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT,
  title VARCHAR(120) NOT NULL,
  description TEXT NOT NULL,
  icon VARCHAR(10) DEFAULT 'üèÜ',
  type ENUM('module', 'trail', 'streak', 'special') DEFAULT 'module',
  requirement_value INT DEFAULT 1,
  xp_reward INT DEFAULT 50,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (id),
  INDEX idx_type (type)
);

-- Criar tabela de conquistas do usu√°rio
CREATE TABLE user_achievements (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT,
  user_id INT UNSIGNED NOT NULL,
  achievement_id INT UNSIGNED NOT NULL,
  earned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (id),
  UNIQUE KEY unique_user_achievement (user_id, achievement_id),
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
  FOREIGN KEY (achievement_id) REFERENCES achievements(id) ON DELETE CASCADE,
  INDEX idx_user (user_id)
);

-- Criar tabela de XP do usu√°rio (consolidado)
CREATE TABLE user_xp (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT,
  user_id INT UNSIGNED NOT NULL,
  total_xp INT DEFAULT 0,
  level INT DEFAULT 1,
  streak_days INT DEFAULT 0,
  last_activity_date DATE NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (id),
  UNIQUE KEY unique_user (user_id),
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Criar tabela de notifica√ß√µes
CREATE TABLE notifications (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT,
  user_id INT UNSIGNED NOT NULL,
  type VARCHAR(50) NOT NULL,
  title VARCHAR(255) NOT NULL,
  body TEXT NOT NULL,
  is_read TINYINT(1) NOT NULL DEFAULT 0,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (id),
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
  INDEX idx_user_id (user_id),
  INDEX idx_is_read (is_read),
  INDEX idx_created_at (created_at)
);

-- ============================================================
-- TRIGGERS E REGRAS DE NEG√ìCIO
-- ============================================================

-- Trigger para atualizar XP total quando m√≥dulo √© completado
DELIMITER $$
CREATE TRIGGER update_user_xp_after_progress
AFTER UPDATE ON user_progress
FOR EACH ROW
BEGIN
  IF NEW.status = 'completed' AND OLD.status != 'completed' THEN
    -- Atualizar XP total do usu√°rio
    INSERT INTO user_xp (user_id, total_xp, level)
    VALUES (NEW.user_id, NEW.xp_earned, 1)
    ON DUPLICATE KEY UPDATE 
      total_xp = total_xp + NEW.xp_earned,
      level = FLOOR((total_xp + NEW.xp_earned) / 1000) + 1,
      last_activity_date = CURDATE(),
      updated_at = CURRENT_TIMESTAMP;
    
    -- Criar notifica√ß√£o de conclus√£o
    INSERT INTO notifications (user_id, type, title, body)
    VALUES (NEW.user_id, 'module_completed', 'M√≥dulo Conclu√≠do!', CONCAT('Voc√™ completou o m√≥dulo e ganhou ', NEW.xp_earned, ' XP!'));
  END IF;
END$$
DELIMITER ;

-- Trigger para atualizar total_xp da trilha quando m√≥dulo √© adicionado
DELIMITER $$
CREATE TRIGGER update_trail_xp_after_module_insert
AFTER INSERT ON modules
FOR EACH ROW
BEGIN
  UPDATE trails 
  SET total_xp = total_xp + NEW.xp_reward,
      updated_at = CURRENT_TIMESTAMP
  WHERE id = NEW.trail_id;
END$$
DELIMITER ;

-- ============================================================
-- DADOS INICIAIS
-- ============================================================

-- Inserir usu√°rio admin inicial
INSERT INTO users (name, email, matricula, password_hash, role, course) VALUES 
('Professor Admin', 'admin@trilhas.com', 'PROF-0001', '$2b$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'professor', NULL);

-- Inserir trilhas base (compartilhadas por todos os cursos)
INSERT INTO trails (title, description, icon, category, difficulty, total_xp, course) VALUES
('Matem√°tica', 'Fundamentos de matem√°tica para ensino m√©dio t√©cnico', 'üî¢', 'Base', 'beginner', 400, 'base'),
('Portugu√™s', 'L√≠ngua Portuguesa e Literatura', 'üìù', 'Base', 'beginner', 400, 'base'),
('F√≠sica', 'Fundamentos de F√≠sica', '‚öõÔ∏è', 'Base', 'beginner', 400, 'base'),
('Qu√≠mica', 'Fundamentos de Qu√≠mica', 'üß™', 'Base', 'beginner', 400, 'base'),
('Biologia', 'Ci√™ncias Biol√≥gicas', 'üß¨', 'Base', 'beginner', 400, 'base'),
('Hist√≥ria', 'Hist√≥ria Geral e do Brasil', 'üìö', 'Base', 'beginner', 400, 'base'),
('Geografia', 'Geografia F√≠sica e Humana', 'üåç', 'Base', 'beginner', 400, 'base'),
('Artes', 'Artes e Cultura', 'üé®', 'Base', 'beginner', 400, 'base'),
('Educa√ß√£o F√≠sica', 'Educa√ß√£o F√≠sica e Sa√∫de', '‚öΩ', 'Base', 'beginner', 400, 'base');

-- Inserir m√≥dulos para cada trilha base
INSERT INTO modules (trail_id, title, description, order_index, xp_reward, badge) VALUES
-- Matem√°tica
(1, 'Matem√°tica I', 'M√≥dulo I de Matem√°tica', 1, 100, 'ü•á'),
(1, 'Matem√°tica II', 'M√≥dulo II de Matem√°tica', 2, 100, 'ü•à'),
(1, 'Matem√°tica III', 'M√≥dulo III de Matem√°tica', 3, 100, 'ü•â'),
(1, 'Matem√°tica IV', 'M√≥dulo IV de Matem√°tica', 4, 100, 'üèÜ'),
-- Portugu√™s
(2, 'Portugu√™s I', 'M√≥dulo I de Portugu√™s', 1, 100, 'ü•á'),
(2, 'Portugu√™s II', 'M√≥dulo II de Portugu√™s', 2, 100, 'ü•à'),
(2, 'Portugu√™s III', 'M√≥dulo III de Portugu√™s', 3, 100, 'ü•â'),
(2, 'Portugu√™s IV', 'M√≥dulo IV de Portugu√™s', 4, 100, 'üèÜ');

-- Inserir trilhas t√©cnicas para Inform√°tica
INSERT INTO trails (title, description, icon, category, difficulty, total_xp, course) VALUES
('L√≥gica de Programa√ß√£o', 'Fundamentos de l√≥gica e algoritmos', 'üíª', 'T√©cnica', 'intermediate', 400, 'Inform√°tica'),
('Banco de Dados', 'Modelagem e gest√£o de dados', 'üóÑÔ∏è', 'T√©cnica', 'intermediate', 400, 'Inform√°tica'),
('Desenvolvimento Web', 'Cria√ß√£o de aplica√ß√µes web modernas', 'üåê', 'T√©cnica', 'intermediate', 400, 'Inform√°tica'),
('Redes de Computadores', 'Fundamentos de redes e protocolos', 'üîó', 'T√©cnica', 'intermediate', 400, 'Inform√°tica');

-- Inserir m√≥dulos para trilhas t√©cnicas de Inform√°tica
INSERT INTO modules (trail_id, title, description, order_index, xp_reward, badge) VALUES
-- L√≥gica de Programa√ß√£o
(10, 'Algoritmos I', 'Introdu√ß√£o aos algoritmos', 1, 100, 'ü•á'),
(10, 'Estruturas de Controle', 'Condicionais e loops', 2, 100, 'ü•à'),
(10, 'Fun√ß√µes e Procedimentos', 'Modulariza√ß√£o de c√≥digo', 3, 100, 'ü•â'),
(10, 'Recurs√£o', 'Conceitos de recurs√£o', 4, 100, 'üèÜ'),
-- Banco de Dados
(11, 'Modelagem de Dados', 'Conceitos de modelagem', 1, 100, 'ü•á'),
(11, 'SQL B√°sico', 'Consultas e manipula√ß√£o', 2, 100, 'ü•à'),
(11, 'SQL Avan√ßado', 'Joins e subconsultas', 3, 100, 'ü•â'),
(11, 'Normaliza√ß√£o', 'T√©cnicas de normaliza√ß√£o', 4, 100, 'üèÜ');

-- Inserir conquistas
INSERT INTO achievements (title, description, icon, type, requirement_value, xp_reward) VALUES
('Primeiro Passo', 'Complete seu primeiro m√≥dulo', 'üéØ', 'module', 1, 50),
('Dedica√ß√£o', 'Complete 5 m√≥dulos', '‚≠ê', 'module', 5, 100),
('Mestre', 'Complete 10 m√≥dulos', 'üåü', 'module', 10, 200),
('Trilheiro Iniciante', 'Complete sua primeira trilha', 'üèÖ', 'trail', 1, 150),
('Trilheiro Expert', 'Complete 3 trilhas', 'üèÜ', 'trail', 3, 300),
('Sequ√™ncia de Fogo', 'Mantenha 7 dias de sequ√™ncia', 'üî•', 'streak', 7, 100),
('Impar√°vel', 'Mantenha 30 dias de sequ√™ncia', 'üöÄ', 'streak', 30, 500),
('Programador Iniciante', 'Complete m√≥dulos de programa√ß√£o', 'üíª', 'special', 1, 75);

-- ============================================================
-- VERIFICA√á√ïES FINAIS
-- ============================================================

SELECT '‚úÖ Banco de dados Trilhas COMPLETO criado com sucesso!' AS status;
SELECT 'üìä Estrutura das tabelas:' AS info;
SHOW TABLES;

SELECT 'üë§ Usu√°rio admin criado: admin@trilhas.com (senha: admin123)' AS admin_info;
SELECT 'üéÆ Sistema de gamifica√ß√£o ativo com trilhas, m√≥dulos e conquistas!' AS gamification_info;
SELECT 'üîó Relacionamentos configurados entre todas as tabelas!' AS relationships_info;
